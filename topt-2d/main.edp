// Tested on FreeFem++ v4.12
load "iovtk"
// load "PARDISO"

//------------
// Parameters
//------------
int nn = 150; // fineness of the mesh
real kappa1 = 1.0;
real kappa2 = 0.01;
real alpha = 120; //60; //80; 
real c = 5e-4; 
real eps = 1e-1;
real lambda = 1.4; //1.4; //1.2; //1.0; //0.16; 
real ThresConvergence = 0.045;
real L = 1.0;
real H = 0.5;
real delta = 0.055;
macro g [0,-1.0] // traction vector
bool symm = false;

real rhomin = 1e-2;
real rhomax = 1;

// Solid Mechanics
real E;			E 			= 1;					// Young's modulus
real nu; 		nu 			= 0.3;						// Poisson's ratio
real dl;	dl 		= E*nu/(1+nu)/(1-2.*nu);	// Lame coefficient
real mu; 		mu 			= E/(2*(1+nu));				// Lame coefficient

func f = 1.0; 
// macro kappa(x,y) ( kappa1*(tanh(alpha*(rho(x,y)-0.5)) + 1) / 2 + kappa2 ) //
// macro kappaD(x,y) ( kappa1*alpha / (2*cosh(alpha*(rho(x,y)-0.5))^2) ) //

macro kappa(x,y) ( rho(x,y)^3 ) //
macro kappaD(x,y) ( 3*rho(x,y)^2 ) //

//----------
// Geometry
//----------
mesh Th;
int[int] labelTraction = [6];
int[int] labelFixed = [4,7,10];
{
    int[int] label;
    // [0,H/2]      <--3 [L,H/2]
    //   ↓4              ↑2
    // [0,+delta/2] -->1 [L,+delta/2]
    label = [1,2,3,4];
    mesh ThTop = square(nn*L, nn*(H-delta)/2, [0+(L-0)*x, +delta/2+(H/2-delta/2)*y], flags=1, label=label);
    
    // [0,+delta/2] <--1 [L,+delta/2]
    //   ↓7              ↑6
    // [0,-delta/2] -->5 [L,-delta/2]
    label = [5,6,1,7];
    mesh ThCenter = square(nn*L, nn*(delta+delta)/2, [0+(L-0)*x, -delta/2+(+delta/2+delta/2)*y], flags=1, label=label);

    // [0,-delta/2] <--5 [L,-delta/2]
    //   ↓10              ↑9
    // [0,-H/2]      -->8 [L,-H/2]
    label = [8,9,5,10];
    mesh ThBottom = square(nn*L, nn*(H-delta)/2, [0+(L-0)*x, -H/2+(-delta/2+H/2)*y], flags=1, label=label);


    Th = ThTop + ThCenter + ThBottom;
    plot(Th,wait=true);

    savemesh(Th,"output/Th.mesh");

}

fespace Vh(Th,P1);
fespace VhV(Th,[P2,P2]);

//---------------
// Initial rho
//---------------
Vh rho = 1;

//-----------
// Iteration
//-----------
ofstream ff("output/history.dat");
for(int step=0; step<2000; step++){
    cout << "# step: " << step << endl;

    // Plot and output kappa
    {
        Vh tmp = kappa(x,y);
        plot(tmp,fill=true,value=true,cmm="kappa, step: "+step);

        int[int] order = [1,1];
        savevtk("output/result_"+step+".vtu", Th, tmp, rho, order=order, dataname="kappa rho");
    }
    

    // Compute temperature field u
    macro u [u1,u2] 	//	displacement vector
    macro v [v1,v2] 	//	test function for displacement
    macro e(u) [dx(u[0]),dy(u[1]),(dx(u[1])+dy(u[0]))] // strain tensor
    macro D [[2.*mu+dl,dl,0],[dl,2.*mu+dl,0],[0,0,2.*mu]] //elastic tensor
    VhV u;
    {
        VhV v;
        solve primal(u,v) = int1d(Th,labelTraction)(g'*v) -int2d(Th)((kappa(x,y)*D*e(u))'*e(v)) + on(labelFixed,u1=0,u2=0)
		;

        
    }

    // Compute gradient of j
    Vh grad;
    {
        Vh w;
        solve ComputeGrad(grad,w) = int2d(Th)(c*(dx(grad)*dx(w)+dy(grad)*dy(w)) + grad*w)
        // + int2d(Th)(kappaD(x,y)*(dx(u)*dx(u)+dy(u)*dy(u) - lambda )*w);
        + int2d(Th)(((kappaD(x,y)*D*e(u))'*e(u) - lambda )*w);
        //(dfdrho(rho)*D*e(u))'*e(u)
    }

    // Output objective function, volume, and norm of the gradient
    real obj;
    {
        Vh w = abs(grad);
        real norm = sqrt(int2d(Th)(c*(dx(grad)*dx(grad)+dy(grad)*dy(grad)) + grad*grad)); // w[].max;
        obj = int1d(Th,labelTraction)(g'*u) + lambda*int2d(Th)(kappa(x,y));
        ff << step << " " << obj << " " << int2d(Th)(kappa(x,y)) << " " << norm << "\n";
        ff.flush;

        grad = grad / norm;

        // Convergence check
        // if(norm < ThresConvergence) exit(0);
    }

    //------------
    // Update rho
    //------------

    // Check the step size is approp.
    real eps2 = eps;
    for(int i=0; i<10; i++){
        Vh rhoTmp = rho; // for recorvery
        rho = rho - eps2*grad;

        rho = max(rho,rhomin);
	    rho = min(rho,rhomax);

        VhV v;
        solve primal(u,v) = int1d(Th,labelTraction)(g'*v) -int2d(Th)((kappa(x,y)*D*e(u))'*e(v)) + on(labelFixed,u1=0,u2=0)
		;
        real objNext = int1d(Th,labelTraction)(g'*u) + lambda*int2d(Th)(kappa(x,y));

        if(false){//objNext >= obj){
            eps2 = eps2 / 2;
            rho = rhoTmp;
        }
        else{
            break;
        }

    }

    if(symm) rho = (rho(x,y) + rho(x,-y))/2;

    
}